// Package examples contains the types for schema 'oui'.
package examples

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/google/uuid"
)

// Entity represents a row from 'oui.entity'.
type Entity struct {
	EntityID   uuid.UUID      `json:"entity_id"`   // entity_id
	Name       sql.NullString `json:"name"`        // name
	EntityType sql.NullString `json:"entity_type"` // entity_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Entity exists in the database.
func (e *Entity) Exists() bool {
	return e._exists
}

// Deleted provides information if the Entity has been deleted from the database.
func (e *Entity) Deleted() bool {
	return e._deleted
}

// Insert inserts the Entity to the database.
func (e *Entity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.entity (` +
		`entity_id, name, entity_type` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, e.EntityID, e.Name, e.EntityType)
	err = db.QueryRow(sqlstr, e.EntityID, e.Name, e.EntityType).Scan(&e.EntityID)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Entity in the database.
func (e *Entity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.entity SET (` +
		`name, entity_type` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE entity_id = $3`

	// run query
	XOLog(sqlstr, e.Name, e.EntityType, e.EntityID)
	_, err = db.Exec(sqlstr, e.Name, e.EntityType, e.EntityID)
	return err
}

// Save saves the Entity to the database.
func (e *Entity) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Entity.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Entity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.entity (` +
		`entity_id, name, entity_type` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (entity_id) DO UPDATE SET (` +
		`entity_id, name, entity_type` +
		`) = (` +
		`EXCLUDED.entity_id, EXCLUDED.name, EXCLUDED.entity_type` +
		`)`

	// run query
	XOLog(sqlstr, e.EntityID, e.Name, e.EntityType)
	_, err = db.Exec(sqlstr, e.EntityID, e.Name, e.EntityType)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Entity from the database.
func (e *Entity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.entity WHERE entity_id = $1`

	// run query
	XOLog(sqlstr, e.EntityID)
	_, err = db.Exec(sqlstr, e.EntityID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EntityByEntityID retrieves a row from 'oui.entity' as a Entity.
//
// Generated from index 'entity_pk'.
func EntityByEntityID(db XODB, entityID uuid.UUID) (*Entity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`entity_id, name, entity_type ` +
		`FROM oui.entity ` +
		`WHERE entity_id = $1`

	// run query
	XOLog(sqlstr, entityID)
	e := Entity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, entityID).Scan(&e.EntityID, &e.Name, &e.EntityType)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
