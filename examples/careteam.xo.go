// Package examples contains the types for schema 'oui'.
package examples

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/google/uuid"
)

// CareTeam represents a row from 'oui.care_team'.
type CareTeam struct {
	PatientID  uuid.UUID `json:"patient_id"`   // patient_id
	CareTeamID uuid.UUID `json:"care_team_id"` // care_team_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CareTeam exists in the database.
func (ct *CareTeam) Exists() bool {
	return ct._exists
}

// Deleted provides information if the CareTeam has been deleted from the database.
func (ct *CareTeam) Deleted() bool {
	return ct._deleted
}

// Insert inserts the CareTeam to the database.
func (ct *CareTeam) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ct._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.care_team (` +
		`patient_id, care_team_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, ct.PatientID, ct.CareTeamID)
	err = db.QueryRow(sqlstr, ct.PatientID, ct.CareTeamID).Scan(&ct.CareTeamID)
	if err != nil {
		return err
	}

	// set existence
	ct._exists = true

	return nil
}

// Update updates the CareTeam in the database.
func (ct *CareTeam) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ct._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.care_team SET (` +
		`patient_id` +
		`) = ( ` +
		`$1` +
		`) WHERE care_team_id = $2`

	// run query
	XOLog(sqlstr, ct.PatientID, ct.CareTeamID)
	_, err = db.Exec(sqlstr, ct.PatientID, ct.CareTeamID)
	return err
}

// Save saves the CareTeam to the database.
func (ct *CareTeam) Save(db XODB) error {
	if ct.Exists() {
		return ct.Update(db)
	}

	return ct.Insert(db)
}

// Upsert performs an upsert for CareTeam.
//
// NOTE: PostgreSQL 9.5+ only
func (ct *CareTeam) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ct._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.care_team (` +
		`patient_id, care_team_id` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (care_team_id) DO UPDATE SET (` +
		`patient_id, care_team_id` +
		`) = (` +
		`EXCLUDED.patient_id, EXCLUDED.care_team_id` +
		`)`

	// run query
	XOLog(sqlstr, ct.PatientID, ct.CareTeamID)
	_, err = db.Exec(sqlstr, ct.PatientID, ct.CareTeamID)
	if err != nil {
		return err
	}

	// set existence
	ct._exists = true

	return nil
}

// Delete deletes the CareTeam from the database.
func (ct *CareTeam) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ct._exists {
		return nil
	}

	// if deleted, bail
	if ct._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.care_team WHERE care_team_id = $1`

	// run query
	XOLog(sqlstr, ct.CareTeamID)
	_, err = db.Exec(sqlstr, ct.CareTeamID)
	if err != nil {
		return err
	}

	// set deleted
	ct._deleted = true

	return nil
}

// Patient returns the Patient associated with the CareTeam's PatientID (patient_id).
//
// Generated from foreign key 'care_team_patient_fk'.
func (ct *CareTeam) Patient(db XODB) (*Patient, error) {
	return PatientByPatientID(db, ct.PatientID)
}

// CareTeamByCareTeamID retrieves a row from 'oui.care_team' as a CareTeam.
//
// Generated from index 'care_team_pk'.
func CareTeamByCareTeamID(db XODB, careTeamID uuid.UUID) (*CareTeam, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`patient_id, care_team_id ` +
		`FROM oui.care_team ` +
		`WHERE care_team_id = $1`

	// run query
	XOLog(sqlstr, careTeamID)
	ct := CareTeam{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, careTeamID).Scan(&ct.PatientID, &ct.CareTeamID)
	if err != nil {
		return nil, err
	}

	return &ct, nil
}
