// Package examples contains the types for schema 'oui'.
package examples

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/google/uuid"
)

// ContactPoint represents a row from 'oui.contact_point'.
type ContactPoint struct {
	EntityID       uuid.UUID      `json:"entity_id"`        // entity_id
	ContactPointID uuid.UUID      `json:"contact_point_id"` // contact_point_id
	System         sql.NullString `json:"system"`           // system
	Use            sql.NullString `json:"use"`              // use
	Value          sql.NullString `json:"value"`            // value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ContactPoint exists in the database.
func (cp *ContactPoint) Exists() bool {
	return cp._exists
}

// Deleted provides information if the ContactPoint has been deleted from the database.
func (cp *ContactPoint) Deleted() bool {
	return cp._deleted
}

// Insert inserts the ContactPoint to the database.
func (cp *ContactPoint) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.contact_point (` +
		`entity_id, contact_point_id, system, use, value` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, cp.EntityID, cp.ContactPointID, cp.System, cp.Use, cp.Value)
	err = db.QueryRow(sqlstr, cp.EntityID, cp.ContactPointID, cp.System, cp.Use, cp.Value).Scan(&cp.ContactPointID)
	if err != nil {
		return err
	}

	// set existence
	cp._exists = true

	return nil
}

// Update updates the ContactPoint in the database.
func (cp *ContactPoint) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.contact_point SET (` +
		`entity_id, system, use, value` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE contact_point_id = $5`

	// run query
	XOLog(sqlstr, cp.EntityID, cp.System, cp.Use, cp.Value, cp.ContactPointID)
	_, err = db.Exec(sqlstr, cp.EntityID, cp.System, cp.Use, cp.Value, cp.ContactPointID)
	return err
}

// Save saves the ContactPoint to the database.
func (cp *ContactPoint) Save(db XODB) error {
	if cp.Exists() {
		return cp.Update(db)
	}

	return cp.Insert(db)
}

// Upsert performs an upsert for ContactPoint.
//
// NOTE: PostgreSQL 9.5+ only
func (cp *ContactPoint) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if cp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.contact_point (` +
		`entity_id, contact_point_id, system, use, value` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (contact_point_id) DO UPDATE SET (` +
		`entity_id, contact_point_id, system, use, value` +
		`) = (` +
		`EXCLUDED.entity_id, EXCLUDED.contact_point_id, EXCLUDED.system, EXCLUDED.use, EXCLUDED.value` +
		`)`

	// run query
	XOLog(sqlstr, cp.EntityID, cp.ContactPointID, cp.System, cp.Use, cp.Value)
	_, err = db.Exec(sqlstr, cp.EntityID, cp.ContactPointID, cp.System, cp.Use, cp.Value)
	if err != nil {
		return err
	}

	// set existence
	cp._exists = true

	return nil
}

// Delete deletes the ContactPoint from the database.
func (cp *ContactPoint) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cp._exists {
		return nil
	}

	// if deleted, bail
	if cp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.contact_point WHERE contact_point_id = $1`

	// run query
	XOLog(sqlstr, cp.ContactPointID)
	_, err = db.Exec(sqlstr, cp.ContactPointID)
	if err != nil {
		return err
	}

	// set deleted
	cp._deleted = true

	return nil
}

// Entity returns the Entity associated with the ContactPoint's EntityID (entity_id).
//
// Generated from foreign key 'contact_point_entity_fk'.
func (cp *ContactPoint) Entity(db XODB) (*Entity, error) {
	return EntityByEntityID(db, cp.EntityID)
}

// ContactPointByContactPointID retrieves a row from 'oui.contact_point' as a ContactPoint.
//
// Generated from index 'contact_point_pkey'.
func ContactPointByContactPointID(db XODB, contactPointID uuid.UUID) (*ContactPoint, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`entity_id, contact_point_id, system, use, value ` +
		`FROM oui.contact_point ` +
		`WHERE contact_point_id = $1`

	// run query
	XOLog(sqlstr, contactPointID)
	cp := ContactPoint{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, contactPointID).Scan(&cp.EntityID, &cp.ContactPointID, &cp.System, &cp.Use, &cp.Value)
	if err != nil {
		return nil, err
	}

	return &cp, nil
}
