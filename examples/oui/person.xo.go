// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// Person represents a row from 'oui.person'.
type Person struct {
	GivenName  sql.NullString `json:"given_name"`  // given_name
	FamilyName sql.NullString `json:"family_name"` // family_name
	PersonID   uuid.UUID      `json:"person_id"`   // person_id
	EntityID   uuid.UUID      `json:"entity_id"`   // entity_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Person exists in the database.
func (p *Person) Exists() bool {
	return p._exists
}

// Deleted provides information if the Person has been deleted from the database.
func (p *Person) Deleted() bool {
	return p._deleted
}

// Insert inserts the Person to the database.
func (p *Person) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.person (` +
		`given_name, family_name, person_id, entity_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, p.GivenName, p.FamilyName, p.PersonID, p.EntityID)
	err = db.QueryRow(sqlstr, p.GivenName, p.FamilyName, p.PersonID, p.EntityID).Scan(&p.PersonID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Person in the database.
func (p *Person) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.person SET (` +
		`given_name, family_name, entity_id` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE person_id = $4`

	// run query
	XOLog(sqlstr, p.GivenName, p.FamilyName, p.EntityID, p.PersonID)
	_, err = db.Exec(sqlstr, p.GivenName, p.FamilyName, p.EntityID, p.PersonID)
	return err
}

// Save saves the Person to the database.
func (p *Person) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Person.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Person) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.person (` +
		`given_name, family_name, person_id, entity_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (person_id) DO UPDATE SET (` +
		`given_name, family_name, person_id, entity_id` +
		`) = (` +
		`EXCLUDED.given_name, EXCLUDED.family_name, EXCLUDED.person_id, EXCLUDED.entity_id` +
		`)`

	// run query
	XOLog(sqlstr, p.GivenName, p.FamilyName, p.PersonID, p.EntityID)
	_, err = db.Exec(sqlstr, p.GivenName, p.FamilyName, p.PersonID, p.EntityID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Person from the database.
func (p *Person) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.person WHERE person_id = $1`

	// run query
	XOLog(sqlstr, p.PersonID)
	_, err = db.Exec(sqlstr, p.PersonID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Entity returns the Entity associated with the Person's EntityID (entity_id).
//
// Generated from foreign key 'person_entity_fk'.
func (p *Person) Entity(db XODB) (*Entity, error) {
	return EntityByEntityID(db, p.EntityID)
}

// PersonByPersonID retrieves a row from 'oui.person' as a Person.
//
// Generated from index 'person_id_pk'.
func PersonByPersonID(db XODB, personID uuid.UUID) (*Person, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`given_name, family_name, person_id, entity_id ` +
		`FROM oui.person ` +
		`WHERE person_id = $1`

	// run query
	XOLog(sqlstr, personID)
	p := Person{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, personID).Scan(&p.GivenName, &p.FamilyName, &p.PersonID, &p.EntityID)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
