// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// Organization represents a row from 'oui.organization'.
type Organization struct {
	OrganizationID       uuid.UUID      `json:"organization_id"`        // organization_id
	Name                 sql.NullString `json:"name"`                   // name
	ParentOrganizationID uuid.UUID      `json:"parent_organization_id"` // parent_organization_id
	EntityID             uuid.UUID      `json:"entity_id"`              // entity_id
	EntityType           sql.NullString `json:"entity_type"`            // entity_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Organization exists in the database.
func (o *Organization) Exists() bool {
	return o._exists
}

// Deleted provides information if the Organization has been deleted from the database.
func (o *Organization) Deleted() bool {
	return o._deleted
}

// Insert inserts the Organization to the database.
func (o *Organization) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.organization (` +
		`organization_id, name, parent_organization_id, entity_id, entity_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, o.OrganizationID, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType)
	err = db.QueryRow(sqlstr, o.OrganizationID, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType).Scan(&o.OrganizationID)
	if err != nil {
		return err
	}

	// set existence
	o._exists = true

	return nil
}

// Update updates the Organization in the database.
func (o *Organization) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.organization SET (` +
		`name, parent_organization_id, entity_id, entity_type` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE organization_id = $5`

	// run query
	XOLog(sqlstr, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType, o.OrganizationID)
	_, err = db.Exec(sqlstr, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType, o.OrganizationID)
	return err
}

// Save saves the Organization to the database.
func (o *Organization) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Upsert performs an upsert for Organization.
//
// NOTE: PostgreSQL 9.5+ only
func (o *Organization) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.organization (` +
		`organization_id, name, parent_organization_id, entity_id, entity_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (organization_id) DO UPDATE SET (` +
		`organization_id, name, parent_organization_id, entity_id, entity_type` +
		`) = (` +
		`EXCLUDED.organization_id, EXCLUDED.name, EXCLUDED.parent_organization_id, EXCLUDED.entity_id, EXCLUDED.entity_type` +
		`)`

	// run query
	XOLog(sqlstr, o.OrganizationID, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType)
	_, err = db.Exec(sqlstr, o.OrganizationID, o.Name, o.ParentOrganizationID, o.EntityID, o.EntityType)
	if err != nil {
		return err
	}

	// set existence
	o._exists = true

	return nil
}

// Delete deletes the Organization from the database.
func (o *Organization) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.organization WHERE organization_id = $1`

	// run query
	XOLog(sqlstr, o.OrganizationID)
	_, err = db.Exec(sqlstr, o.OrganizationID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// Entity returns the Entity associated with the Organization's EntityID (entity_id).
//
// Generated from foreign key 'organization_entity_fk'.
func (o *Organization) Entity(db XODB) (*Entity, error) {
	return EntityByEntityID(db, o.EntityID)
}

// OrganizationByOrganizationID retrieves a row from 'oui.organization' as a Organization.
//
// Generated from index 'organization_pk'.
func OrganizationByOrganizationID(db XODB, organizationID uuid.UUID) (*Organization, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`organization_id, name, parent_organization_id, entity_id, entity_type ` +
		`FROM oui.organization ` +
		`WHERE organization_id = $1`

	// run query
	XOLog(sqlstr, organizationID)
	o := Organization{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, organizationID).Scan(&o.OrganizationID, &o.Name, &o.ParentOrganizationID, &o.EntityID, &o.EntityType)
	if err != nil {
		return nil, err
	}

	return &o, nil
}
