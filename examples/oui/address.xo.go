// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
	"github.com/lib/pq"
)

// Address represents a row from 'oui.address'.
type Address struct {
	AddressID  uuid.UUID        `json:"address_id"`  // address_id
	EntityID   uuid.UUID        `json:"entity_id"`   // entity_id
	Use        sql.NullString   `json:"use"`         // use
	Line       []sql.NullString `json:"line"`        // line
	City       sql.NullString   `json:"city"`        // city
	State      sql.NullString   `json:"state"`       // state
	PostalCode sql.NullString   `json:"postal_code"` // postal_code
	StartDate  pq.NullTime      `json:"start_date"`  // start_date
	EndDate    pq.NullTime      `json:"end_date"`    // end_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Address exists in the database.
func (a *Address) Exists() bool {
	return a._exists
}

// Deleted provides information if the Address has been deleted from the database.
func (a *Address) Deleted() bool {
	return a._deleted
}

// Insert inserts the Address to the database.
func (a *Address) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.address (` +
		`address_id, entity_id, use, line, city, state, postal_code, start_date, end_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)`

	// run query
	XOLog(sqlstr, a.AddressID, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate)
	err = db.QueryRow(sqlstr, a.AddressID, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate).Scan(&a.AddressID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Address in the database.
func (a *Address) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.address SET (` +
		`entity_id, use, line, city, state, postal_code, start_date, end_date` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE address_id = $9`

	// run query
	XOLog(sqlstr, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate, a.AddressID)
	_, err = db.Exec(sqlstr, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate, a.AddressID)
	return err
}

// Save saves the Address to the database.
func (a *Address) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Address.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Address) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.address (` +
		`address_id, entity_id, use, line, city, state, postal_code, start_date, end_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (address_id) DO UPDATE SET (` +
		`address_id, entity_id, use, line, city, state, postal_code, start_date, end_date` +
		`) = (` +
		`EXCLUDED.address_id, EXCLUDED.entity_id, EXCLUDED.use, EXCLUDED.line, EXCLUDED.city, EXCLUDED.state, EXCLUDED.postal_code, EXCLUDED.start_date, EXCLUDED.end_date` +
		`)`

	// run query
	XOLog(sqlstr, a.AddressID, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate)
	_, err = db.Exec(sqlstr, a.AddressID, a.EntityID, a.Use, a.Line, a.City, a.State, a.PostalCode, a.StartDate, a.EndDate)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Address from the database.
func (a *Address) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.address WHERE address_id = $1`

	// run query
	XOLog(sqlstr, a.AddressID)
	_, err = db.Exec(sqlstr, a.AddressID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Entity returns the Entity associated with the Address's EntityID (entity_id).
//
// Generated from foreign key 'address_entity_fk'.
func (a *Address) Entity(db XODB) (*Entity, error) {
	return EntityByEntityID(db, a.EntityID)
}

// AddressByAddressID retrieves a row from 'oui.address' as a Address.
//
// Generated from index 'address_pk'.
func AddressByAddressID(db XODB, addressID uuid.UUID) (*Address, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`address_id, entity_id, use, line, city, state, postal_code, start_date, end_date ` +
		`FROM oui.address ` +
		`WHERE address_id = $1`

	// run query
	XOLog(sqlstr, addressID)
	a := Address{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, addressID).Scan(&a.AddressID, &a.EntityID, &a.Use, &a.Line, &a.City, &a.State, &a.PostalCode, &a.StartDate, &a.EndDate)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
