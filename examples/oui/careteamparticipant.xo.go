// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// CareTeamParticipant represents a row from 'oui.care_team_participant'.
type CareTeamParticipant struct {
	CareTeamID uuid.UUID      `json:"care_team_id"` // care_team_id
	EntityID   uuid.UUID      `json:"entity_id"`    // entity_id
	Role       sql.NullString `json:"role"`         // role

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CareTeamParticipant exists in the database.
func (ctp *CareTeamParticipant) Exists() bool {
	return ctp._exists
}

// Deleted provides information if the CareTeamParticipant has been deleted from the database.
func (ctp *CareTeamParticipant) Deleted() bool {
	return ctp._deleted
}

// Insert inserts the CareTeamParticipant to the database.
func (ctp *CareTeamParticipant) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ctp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.care_team_participant (` +
		`care_team_id, entity_id, role` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, ctp.CareTeamID, ctp.EntityID, ctp.Role)
	err = db.QueryRow(sqlstr, ctp.CareTeamID, ctp.EntityID, ctp.Role).Scan(&ctp.EntityID)
	if err != nil {
		return err
	}

	// set existence
	ctp._exists = true

	return nil
}

// Update updates the CareTeamParticipant in the database.
func (ctp *CareTeamParticipant) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ctp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ctp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE oui.care_team_participant SET (` +
		`role` +
		`) = ( ` +
		`$1` +
		`) WHERE care_team_id = $2 AND entity_id = $3`

	// run query
	XOLog(sqlstr, ctp.Role, ctp.CareTeamID, ctp.EntityID)
	_, err = db.Exec(sqlstr, ctp.Role, ctp.CareTeamID, ctp.EntityID)
	return err
}

// Save saves the CareTeamParticipant to the database.
func (ctp *CareTeamParticipant) Save(db XODB) error {
	if ctp.Exists() {
		return ctp.Update(db)
	}

	return ctp.Insert(db)
}

// Upsert performs an upsert for CareTeamParticipant.
//
// NOTE: PostgreSQL 9.5+ only
func (ctp *CareTeamParticipant) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ctp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.care_team_participant (` +
		`care_team_id, entity_id, role` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (care_team_id, entity_id) DO UPDATE SET (` +
		`care_team_id, entity_id, role` +
		`) = (` +
		`EXCLUDED.care_team_id, EXCLUDED.entity_id, EXCLUDED.role` +
		`)`

	// run query
	XOLog(sqlstr, ctp.CareTeamID, ctp.EntityID, ctp.Role)
	_, err = db.Exec(sqlstr, ctp.CareTeamID, ctp.EntityID, ctp.Role)
	if err != nil {
		return err
	}

	// set existence
	ctp._exists = true

	return nil
}

// Delete deletes the CareTeamParticipant from the database.
func (ctp *CareTeamParticipant) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ctp._exists {
		return nil
	}

	// if deleted, bail
	if ctp._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM oui.care_team_participant  WHERE care_team_id = $1 AND entity_id = $2`

	// run query
	XOLog(sqlstr, ctp.CareTeamID, ctp.EntityID)
	_, err = db.Exec(sqlstr, ctp.CareTeamID, ctp.EntityID)
	if err != nil {
		return err
	}

	// set deleted
	ctp._deleted = true

	return nil
}

// CareTeam returns the CareTeam associated with the CareTeamParticipant's CareTeamID (care_team_id).
//
// Generated from foreign key 'care_team_participant_care_team'.
func (ctp *CareTeamParticipant) CareTeam(db XODB) (*CareTeam, error) {
	return CareTeamByCareTeamID(db, ctp.CareTeamID)
}

// Entity returns the Entity associated with the CareTeamParticipant's EntityID (entity_id).
//
// Generated from foreign key 'care_team_participant_entity_fk'.
func (ctp *CareTeamParticipant) Entity(db XODB) (*Entity, error) {
	return EntityByEntityID(db, ctp.EntityID)
}

// CareTeamParticipantByCareTeamIDEntityID retrieves a row from 'oui.care_team_participant' as a CareTeamParticipant.
//
// Generated from index 'care_team_participant_pk'.
func CareTeamParticipantByCareTeamIDEntityID(db XODB, careTeamID uuid.UUID, entityID uuid.UUID) (*CareTeamParticipant, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`care_team_id, entity_id, role ` +
		`FROM oui.care_team_participant ` +
		`WHERE care_team_id = $1 AND entity_id = $2`

	// run query
	XOLog(sqlstr, careTeamID, entityID)
	ctp := CareTeamParticipant{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, careTeamID, entityID).Scan(&ctp.CareTeamID, &ctp.EntityID, &ctp.Role)
	if err != nil {
		return nil, err
	}

	return &ctp, nil
}
