// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// Practitioner represents a row from 'oui.practitioner'.
type Practitioner struct {
	NpiNumber      sql.NullInt64 `json:"npi_number"`      // npi_number
	PersonID       uuid.UUID     `json:"person_id"`       // person_id
	PractitionerID uuid.UUID     `json:"practitioner_id"` // practitioner_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Practitioner exists in the database.
func (p *Practitioner) Exists() bool {
	return p._exists
}

// Deleted provides information if the Practitioner has been deleted from the database.
func (p *Practitioner) Deleted() bool {
	return p._deleted
}

// Insert inserts the Practitioner to the database.
func (p *Practitioner) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.practitioner (` +
		`npi_number, person_id, practitioner_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID)
	err = db.QueryRow(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID).Scan(&p.PractitionerID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Practitioner in the database.
func (p *Practitioner) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.practitioner SET (` +
		`npi_number, person_id` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE practitioner_id = $3`

	// run query
	XOLog(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID)
	_, err = db.Exec(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID)
	return err
}

// Save saves the Practitioner to the database.
func (p *Practitioner) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Practitioner.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Practitioner) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.practitioner (` +
		`npi_number, person_id, practitioner_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (practitioner_id) DO UPDATE SET (` +
		`npi_number, person_id, practitioner_id` +
		`) = (` +
		`EXCLUDED.npi_number, EXCLUDED.person_id, EXCLUDED.practitioner_id` +
		`)`

	// run query
	XOLog(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID)
	_, err = db.Exec(sqlstr, p.NpiNumber, p.PersonID, p.PractitionerID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Practitioner from the database.
func (p *Practitioner) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.practitioner WHERE practitioner_id = $1`

	// run query
	XOLog(sqlstr, p.PractitionerID)
	_, err = db.Exec(sqlstr, p.PractitionerID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Person returns the Person associated with the Practitioner's PersonID (person_id).
//
// Generated from foreign key 'practitioner_person_fk'.
func (p *Practitioner) Person(db XODB) (*Person, error) {
	return PersonByPersonID(db, p.PersonID)
}

// PractitionerByPractitionerID retrieves a row from 'oui.practitioner' as a Practitioner.
//
// Generated from index 'practitioner_pk'.
func PractitionerByPractitionerID(db XODB, practitionerID uuid.UUID) (*Practitioner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`npi_number, person_id, practitioner_id ` +
		`FROM oui.practitioner ` +
		`WHERE practitioner_id = $1`

	// run query
	XOLog(sqlstr, practitionerID)
	p := Practitioner{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, practitionerID).Scan(&p.NpiNumber, &p.PersonID, &p.PractitionerID)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
