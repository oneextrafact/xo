// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// EpisodeOfCare represents a row from 'oui.episode_of_care'.
type EpisodeOfCare struct {
	CareManager     sql.NullInt64 `json:"care_manager"`       // care_manager
	CareTeamID      uuid.UUID     `json:"care_team_id"`       // care_team_id
	EpisodeOfCareID uuid.UUID     `json:"episode_of_care_id"` // episode_of_care_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EpisodeOfCare exists in the database.
func (eoc *EpisodeOfCare) Exists() bool {
	return eoc._exists
}

// Deleted provides information if the EpisodeOfCare has been deleted from the database.
func (eoc *EpisodeOfCare) Deleted() bool {
	return eoc._deleted
}

// Insert inserts the EpisodeOfCare to the database.
func (eoc *EpisodeOfCare) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if eoc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.episode_of_care (` +
		`care_manager, care_team_id, episode_of_care_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID)
	err = db.QueryRow(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID).Scan(&eoc.EpisodeOfCareID)
	if err != nil {
		return err
	}

	// set existence
	eoc._exists = true

	return nil
}

// Update updates the EpisodeOfCare in the database.
func (eoc *EpisodeOfCare) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eoc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if eoc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.episode_of_care SET (` +
		`care_manager, care_team_id` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE episode_of_care_id = $3`

	// run query
	XOLog(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID)
	_, err = db.Exec(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID)
	return err
}

// Save saves the EpisodeOfCare to the database.
func (eoc *EpisodeOfCare) Save(db XODB) error {
	if eoc.Exists() {
		return eoc.Update(db)
	}

	return eoc.Insert(db)
}

// Upsert performs an upsert for EpisodeOfCare.
//
// NOTE: PostgreSQL 9.5+ only
func (eoc *EpisodeOfCare) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if eoc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.episode_of_care (` +
		`care_manager, care_team_id, episode_of_care_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (episode_of_care_id) DO UPDATE SET (` +
		`care_manager, care_team_id, episode_of_care_id` +
		`) = (` +
		`EXCLUDED.care_manager, EXCLUDED.care_team_id, EXCLUDED.episode_of_care_id` +
		`)`

	// run query
	XOLog(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID)
	_, err = db.Exec(sqlstr, eoc.CareManager, eoc.CareTeamID, eoc.EpisodeOfCareID)
	if err != nil {
		return err
	}

	// set existence
	eoc._exists = true

	return nil
}

// Delete deletes the EpisodeOfCare from the database.
func (eoc *EpisodeOfCare) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !eoc._exists {
		return nil
	}

	// if deleted, bail
	if eoc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.episode_of_care WHERE episode_of_care_id = $1`

	// run query
	XOLog(sqlstr, eoc.EpisodeOfCareID)
	_, err = db.Exec(sqlstr, eoc.EpisodeOfCareID)
	if err != nil {
		return err
	}

	// set deleted
	eoc._deleted = true

	return nil
}

// CareTeam returns the CareTeam associated with the EpisodeOfCare's CareTeamID (care_team_id).
//
// Generated from foreign key 'episode_of_care_care_team_fk'.
func (eoc *EpisodeOfCare) CareTeam(db XODB) (*CareTeam, error) {
	return CareTeamByCareTeamID(db, eoc.CareTeamID)
}

// EpisodeOfCareByEpisodeOfCareID retrieves a row from 'oui.episode_of_care' as a EpisodeOfCare.
//
// Generated from index 'episode_of_care_pk'.
func EpisodeOfCareByEpisodeOfCareID(db XODB, episodeOfCareID uuid.UUID) (*EpisodeOfCare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`care_manager, care_team_id, episode_of_care_id ` +
		`FROM oui.episode_of_care ` +
		`WHERE episode_of_care_id = $1`

	// run query
	XOLog(sqlstr, episodeOfCareID)
	eoc := EpisodeOfCare{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, episodeOfCareID).Scan(&eoc.CareManager, &eoc.CareTeamID, &eoc.EpisodeOfCareID)
	if err != nil {
		return nil, err
	}

	return &eoc, nil
}
