// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
	"github.com/lib/pq"
)

// OuiUser represents a row from 'oui.oui_user'.
type OuiUser struct {
	UserID                      uuid.UUID      `json:"user_id"`                         // user_id
	PersonID                    uuid.UUID      `json:"person_id"`                       // person_id
	Username                    string         `json:"username"`                        // username
	AuthTokenID                 sql.NullString `json:"auth_token_id"`                   // auth_token_id
	ResetPasswordToken          sql.NullString `json:"reset_password_token"`            // reset_password_token
	ResetPasswordTokenExpiresAt pq.NullTime    `json:"reset_password_token_expires_at"` // reset_password_token_expires_at
	Password                    sql.NullString `json:"password"`                        // password
	PasswordUpdateT             pq.NullTime    `json:"password_update_t"`               // password_update_t

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OuiUser exists in the database.
func (ou *OuiUser) Exists() bool {
	return ou._exists
}

// Deleted provides information if the OuiUser has been deleted from the database.
func (ou *OuiUser) Deleted() bool {
	return ou._deleted
}

// Insert inserts the OuiUser to the database.
func (ou *OuiUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ou._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.oui_user (` +
		`user_id, person_id, username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, ou.UserID, ou.PersonID, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT)
	err = db.QueryRow(sqlstr, ou.UserID, ou.PersonID, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT).Scan(&ou.PersonID)
	if err != nil {
		return err
	}

	// set existence
	ou._exists = true

	return nil
}

// Update updates the OuiUser in the database.
func (ou *OuiUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ou._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ou._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE oui.oui_user SET (` +
		`username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE user_id = $7 AND person_id = $8`

	// run query
	XOLog(sqlstr, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT, ou.UserID, ou.PersonID)
	_, err = db.Exec(sqlstr, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT, ou.UserID, ou.PersonID)
	return err
}

// Save saves the OuiUser to the database.
func (ou *OuiUser) Save(db XODB) error {
	if ou.Exists() {
		return ou.Update(db)
	}

	return ou.Insert(db)
}

// Upsert performs an upsert for OuiUser.
//
// NOTE: PostgreSQL 9.5+ only
func (ou *OuiUser) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ou._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.oui_user (` +
		`user_id, person_id, username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (user_id, person_id) DO UPDATE SET (` +
		`user_id, person_id, username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t` +
		`) = (` +
		`EXCLUDED.user_id, EXCLUDED.person_id, EXCLUDED.username, EXCLUDED.auth_token_id, EXCLUDED.reset_password_token, EXCLUDED.reset_password_token_expires_at, EXCLUDED.password, EXCLUDED.password_update_t` +
		`)`

	// run query
	XOLog(sqlstr, ou.UserID, ou.PersonID, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT)
	_, err = db.Exec(sqlstr, ou.UserID, ou.PersonID, ou.Username, ou.AuthTokenID, ou.ResetPasswordToken, ou.ResetPasswordTokenExpiresAt, ou.Password, ou.PasswordUpdateT)
	if err != nil {
		return err
	}

	// set existence
	ou._exists = true

	return nil
}

// Delete deletes the OuiUser from the database.
func (ou *OuiUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ou._exists {
		return nil
	}

	// if deleted, bail
	if ou._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM oui.oui_user  WHERE user_id = $1 AND person_id = $2`

	// run query
	XOLog(sqlstr, ou.UserID, ou.PersonID)
	_, err = db.Exec(sqlstr, ou.UserID, ou.PersonID)
	if err != nil {
		return err
	}

	// set deleted
	ou._deleted = true

	return nil
}

// Person returns the Person associated with the OuiUser's PersonID (person_id).
//
// Generated from foreign key 'user_person_fk'.
func (ou *OuiUser) Person(db XODB) (*Person, error) {
	return PersonByPersonID(db, ou.PersonID)
}

// OuiUserByUserIDPersonID retrieves a row from 'oui.oui_user' as a OuiUser.
//
// Generated from index 'user_pk'.
func OuiUserByUserIDPersonID(db XODB, userID uuid.UUID, personID uuid.UUID) (*OuiUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, person_id, username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t ` +
		`FROM oui.oui_user ` +
		`WHERE user_id = $1 AND person_id = $2`

	// run query
	XOLog(sqlstr, userID, personID)
	ou := OuiUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, personID).Scan(&ou.UserID, &ou.PersonID, &ou.Username, &ou.AuthTokenID, &ou.ResetPasswordToken, &ou.ResetPasswordTokenExpiresAt, &ou.Password, &ou.PasswordUpdateT)
	if err != nil {
		return nil, err
	}

	return &ou, nil
}

// OuiUserByUsername retrieves a row from 'oui.oui_user' as a OuiUser.
//
// Generated from index 'user_username_uindex'.
func OuiUserByUsername(db XODB, username string) (*OuiUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, person_id, username, auth_token_id, reset_password_token, reset_password_token_expires_at, password, password_update_t ` +
		`FROM oui.oui_user ` +
		`WHERE username = $1`

	// run query
	XOLog(sqlstr, username)
	ou := OuiUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&ou.UserID, &ou.PersonID, &ou.Username, &ou.AuthTokenID, &ou.ResetPasswordToken, &ou.ResetPasswordTokenExpiresAt, &ou.Password, &ou.PasswordUpdateT)
	if err != nil {
		return nil, err
	}

	return &ou, nil
}
