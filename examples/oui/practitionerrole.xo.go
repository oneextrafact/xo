// Package oui contains the types for schema 'oui'.
package oui

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/gofrs/uuid"
)

// PractitionerRole represents a row from 'oui.practitioner_role'.
type PractitionerRole struct {
	OrganizationID   uuid.UUID      `json:"organization_id"`   // organization_id
	PractitionerID   uuid.UUID      `json:"practitioner_id"`   // practitioner_id
	PractitionerRole sql.NullString `json:"practitioner_role"` // practitioner_role

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PractitionerRole exists in the database.
func (pr *PractitionerRole) Exists() bool {
	return pr._exists
}

// Deleted provides information if the PractitionerRole has been deleted from the database.
func (pr *PractitionerRole) Deleted() bool {
	return pr._deleted
}

// Insert inserts the PractitionerRole to the database.
func (pr *PractitionerRole) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.practitioner_role (` +
		`organization_id, practitioner_id, practitioner_role` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, pr.OrganizationID, pr.PractitionerID, pr.PractitionerRole)
	err = db.QueryRow(sqlstr, pr.OrganizationID, pr.PractitionerID, pr.PractitionerRole).Scan(&pr.PractitionerID)
	if err != nil {
		return err
	}

	// set existence
	pr._exists = true

	return nil
}

// Update updates the PractitionerRole in the database.
func (pr *PractitionerRole) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE oui.practitioner_role SET (` +
		`practitioner_role` +
		`) = ( ` +
		`$1` +
		`) WHERE organization_id = $2 AND practitioner_id = $3`

	// run query
	XOLog(sqlstr, pr.PractitionerRole, pr.OrganizationID, pr.PractitionerID)
	_, err = db.Exec(sqlstr, pr.PractitionerRole, pr.OrganizationID, pr.PractitionerID)
	return err
}

// Save saves the PractitionerRole to the database.
func (pr *PractitionerRole) Save(db XODB) error {
	if pr.Exists() {
		return pr.Update(db)
	}

	return pr.Insert(db)
}

// Upsert performs an upsert for PractitionerRole.
//
// NOTE: PostgreSQL 9.5+ only
func (pr *PractitionerRole) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.practitioner_role (` +
		`organization_id, practitioner_id, practitioner_role` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (organization_id, practitioner_id) DO UPDATE SET (` +
		`organization_id, practitioner_id, practitioner_role` +
		`) = (` +
		`EXCLUDED.organization_id, EXCLUDED.practitioner_id, EXCLUDED.practitioner_role` +
		`)`

	// run query
	XOLog(sqlstr, pr.OrganizationID, pr.PractitionerID, pr.PractitionerRole)
	_, err = db.Exec(sqlstr, pr.OrganizationID, pr.PractitionerID, pr.PractitionerRole)
	if err != nil {
		return err
	}

	// set existence
	pr._exists = true

	return nil
}

// Delete deletes the PractitionerRole from the database.
func (pr *PractitionerRole) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return nil
	}

	// if deleted, bail
	if pr._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM oui.practitioner_role  WHERE organization_id = $1 AND practitioner_id = $2`

	// run query
	XOLog(sqlstr, pr.OrganizationID, pr.PractitionerID)
	_, err = db.Exec(sqlstr, pr.OrganizationID, pr.PractitionerID)
	if err != nil {
		return err
	}

	// set deleted
	pr._deleted = true

	return nil
}

// Practitioner returns the Practitioner associated with the PractitionerRole's PractitionerID (practitioner_id).
//
// Generated from foreign key 'practitioner_role_practitioner_fk'.
func (pr *PractitionerRole) Practitioner(db XODB) (*Practitioner, error) {
	return PractitionerByPractitionerID(db, pr.PractitionerID)
}

// PractitionerRoleByOrganizationIDPractitionerID retrieves a row from 'oui.practitioner_role' as a PractitionerRole.
//
// Generated from index 'practitioner_role_pk'.
func PractitionerRoleByOrganizationIDPractitionerID(db XODB, organizationID uuid.UUID, practitionerID uuid.UUID) (*PractitionerRole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`organization_id, practitioner_id, practitioner_role ` +
		`FROM oui.practitioner_role ` +
		`WHERE organization_id = $1 AND practitioner_id = $2`

	// run query
	XOLog(sqlstr, organizationID, practitionerID)
	pr := PractitionerRole{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, organizationID, practitionerID).Scan(&pr.OrganizationID, &pr.PractitionerID, &pr.PractitionerRole)
	if err != nil {
		return nil, err
	}

	return &pr, nil
}
