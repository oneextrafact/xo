// Package examples contains the types for schema 'oui'.
package examples

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

// Patient represents a row from 'oui.patient'.
type Patient struct {
	BirthDate         pq.NullTime    `json:"birth_date"`         // birth_date
	PersonID          uuid.UUID      `json:"person_id"`          // person_id
	PatientID         uuid.UUID      `json:"patient_id"`         // patient_id
	Race              sql.NullString `json:"race"`               // race
	GenderIdentity    sql.NullString `json:"gender_identity"`    // gender_identity
	SexualOrientation sql.NullString `json:"sexual_orientation"` // sexual_orientation
	MilitaryStatus    sql.NullString `json:"military_status"`    // military_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Patient exists in the database.
func (p *Patient) Exists() bool {
	return p._exists
}

// Deleted provides information if the Patient has been deleted from the database.
func (p *Patient) Deleted() bool {
	return p._deleted
}

// Insert inserts the Patient to the database.
func (p *Patient) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO oui.patient (` +
		`birth_date, person_id, patient_id, race, gender_identity, sexual_orientation, military_status` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, p.BirthDate, p.PersonID, p.PatientID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus)
	err = db.QueryRow(sqlstr, p.BirthDate, p.PersonID, p.PatientID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus).Scan(&p.PatientID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Patient in the database.
func (p *Patient) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE oui.patient SET (` +
		`birth_date, person_id, race, gender_identity, sexual_orientation, military_status` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE patient_id = $7`

	// run query
	XOLog(sqlstr, p.BirthDate, p.PersonID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus, p.PatientID)
	_, err = db.Exec(sqlstr, p.BirthDate, p.PersonID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus, p.PatientID)
	return err
}

// Save saves the Patient to the database.
func (p *Patient) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Patient.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Patient) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO oui.patient (` +
		`birth_date, person_id, patient_id, race, gender_identity, sexual_orientation, military_status` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (patient_id) DO UPDATE SET (` +
		`birth_date, person_id, patient_id, race, gender_identity, sexual_orientation, military_status` +
		`) = (` +
		`EXCLUDED.birth_date, EXCLUDED.person_id, EXCLUDED.patient_id, EXCLUDED.race, EXCLUDED.gender_identity, EXCLUDED.sexual_orientation, EXCLUDED.military_status` +
		`)`

	// run query
	XOLog(sqlstr, p.BirthDate, p.PersonID, p.PatientID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus)
	_, err = db.Exec(sqlstr, p.BirthDate, p.PersonID, p.PatientID, p.Race, p.GenderIdentity, p.SexualOrientation, p.MilitaryStatus)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Patient from the database.
func (p *Patient) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM oui.patient WHERE patient_id = $1`

	// run query
	XOLog(sqlstr, p.PatientID)
	_, err = db.Exec(sqlstr, p.PatientID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Person returns the Person associated with the Patient's PersonID (person_id).
//
// Generated from foreign key 'patient_person_fk'.
func (p *Patient) Person(db XODB) (*Person, error) {
	return PersonByPersonID(db, p.PersonID)
}

// PatientByPatientID retrieves a row from 'oui.patient' as a Patient.
//
// Generated from index 'patient_pk'.
func PatientByPatientID(db XODB, patientID uuid.UUID) (*Patient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`birth_date, person_id, patient_id, race, gender_identity, sexual_orientation, military_status ` +
		`FROM oui.patient ` +
		`WHERE patient_id = $1`

	// run query
	XOLog(sqlstr, patientID)
	p := Patient{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, patientID).Scan(&p.BirthDate, &p.PersonID, &p.PatientID, &p.Race, &p.GenderIdentity, &p.SexualOrientation, &p.MilitaryStatus)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
